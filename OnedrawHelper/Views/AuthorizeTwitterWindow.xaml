<Window x:Class="OnedrawHelper.Views.AuthorizeTwitterWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:OnedrawHelper.Views"
        xmlns:vm="clr-namespace:OnedrawHelper.ViewModels"
        xmlns:conv="clr-namespace:OnedrawHelper.Converters"
        Title="Twitter認証" SizeToContent="Height"
        WindowStyle="ToolWindow" ShowInTaskbar="False" ResizeMode="NoResize"
        Width="460">

    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <conv:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
    </Window.Resources>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger MessageKey="InformationMessage" Messenger="{Binding Messenger}">
            <l:InformationDialogInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction>
                <l:DirectInteractionMessage>
                    <l:WindowActionMessage Action="Close"/>
                </l:DirectInteractionMessage>
            </l:WindowInteractionMessageAction>
        </l:InteractionMessageTrigger>
    </i:Interaction.Triggers>

    <StackPanel Margin="1">
        <StackPanel>
            <TextBlock TextWrapping="Wrap">
                Twitterへのアクセスのための認証を行います。<LineBreak/>
                普段お使いのブラウザ上で認証するアカウントでログインしてください。<LineBreak/>
                認証開始ボタンをクリックして続行します。<LineBreak/>
                <Italic>* ユーザーの同意なくツイートを送信することはありません。</Italic>
            </TextBlock>
            <Button Margin="2" Content="認証開始"
                    Command="{Binding CreateSessionCommand}"
                    IsEnabled="{Binding IsSessionCreating, Converter={StaticResource InverseBooleanConverter}}"/>
        </StackPanel>

        <StackPanel Visibility="{Binding IsSessionCreated, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Separator Height="5"/>
            <TextBlock TextWrapping="Wrap">
                開かれたブラウザ上で承認を行い、
                表示されたPINコードを入力してください。<LineBreak/>
                認証に何回も失敗する場合は、ウィンドウを閉じて再度試みてください。
            </TextBlock>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBox Margin="2" TextAlignment="Center"
                         Text="{Binding PinCode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         IsEnabled="{Binding IsAuthorizing, Converter={StaticResource InverseBooleanConverter}}"/>
                <Button Margin="2" Content="認証" Grid.Column="1"
                        Command="{Binding AuthorizeCommand}"
                        IsEnabled="{Binding IsAuthorizing, Converter={StaticResource InverseBooleanConverter}}"/>
            </Grid>
        </StackPanel>
    </StackPanel>
</Window>
