<Window x:Class="OnedrawHelper.Views.UpdateStatusWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:OnedrawHelper.Views"
        xmlns:vm="clr-namespace:OnedrawHelper.ViewModels"
        xmlns:conv="clr-namespace:OnedrawHelper.Converters"
        xmlns:b="clr-namespace:OnedrawHelper.Behaviors"
        Title="Twitter投稿" Height="225" Width="400"
        Icon="../Resources/MainIcon.ico"
        MinWidth="400" MinHeight="225">

    <!--<Window.DataContext>
        <vm:UpdateStatusWindowViewModel/>
    </Window.DataContext>-->

    <Window.Resources>
        <conv:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
    </Window.Resources>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <l:InteractionMessageTrigger MessageKey="InformationMessage" Messenger="{Binding Messenger}">
            <l:InformationDialogInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction>
                <l:DirectInteractionMessage>
                    <l:WindowActionMessage Action="Close"/>
                </l:DirectInteractionMessage>
            </l:WindowInteractionMessageAction>
        </l:InteractionMessageTrigger>
    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*" MinHeight="60"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*" MinHeight="60"/>
        </Grid.RowDefinitions>

        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <StackPanel Orientation="Horizontal" ToolTip="このアカウントでツイートが送信されます。">
                <Image Margin="2" Width="48" Height="48"
                       RenderOptions.BitmapScalingMode="HighQuality">
                    <i:Interaction.Behaviors>
                        <b:LazyImageBehavior LazySource="{Binding AuthorizedUser.ProfileImageUrl}"/>
                    </i:Interaction.Behaviors>
                </Image>
                <StackPanel Margin="2" VerticalAlignment="Center">
                    <TextBlock Text="{Binding AuthorizedUser.ScreenName, StringFormat={}@{0}}"/>
                    <TextBlock Text="{Binding AuthorizedUser.Name}" FontSize="20"/>
                </StackPanel>
            </StackPanel>

            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <TextBlock Margin="2,2,2,0" Text="{Binding RemainingLength}" HorizontalAlignment="Center"/>
                <Button Grid.Row="1" Margin="2,0,2,2" Content="ツイート"
                        IsEnabled="{Binding IsSending, Converter={StaticResource InverseBooleanConverter}}"
                        Command="{Binding UpdateStatusCommand}"/>
            </Grid>
        </Grid>
        <TextBox Grid.Row="1" Margin="2,0,2,2" Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" TextWrapping="Wrap"/>
        <GridSplitter Grid.Row="2" Height="4" IsTabStop="False" Focusable="False" HorizontalAlignment="Stretch" VerticalContentAlignment="Center"/>
        <ScrollViewer Grid.Row="3" Margin="2" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Hidden" AllowDrop="True">
            <i:Interaction.Behaviors>
                <b:AcceptDropBehavior Description="{Binding DataContext.DropDescription, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"/>
            </i:Interaction.Behaviors>
            <StackPanel Orientation="Horizontal"
                        Height="{Binding ViewportHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ScrollViewer}}">
                <ItemsControl ItemsSource="{Binding Paths}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Grid Margin="2">
                                <Image RenderOptions.BitmapScalingMode="HighQuality" Height="{Binding ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid}}">
                                    <i:Interaction.Behaviors>
                                        <b:LazyImageBehavior LazySource="{Binding}"/>
                                    </i:Interaction.Behaviors>
                                </Image>
                                <Button Content="r" FontFamily="Marlett" FontSize="14" Background="Black" Foreground="White"
                                    Command="{Binding DataContext.RemovePathCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"
                                    CommandParameter="{Binding}">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="Button">
                                                        <Border x:Name="border" Background="{TemplateBinding Background}">
                                                            <VisualStateManager.VisualStateGroups>
                                                                <VisualStateGroup x:Name="CommonStates">
                                                                    <VisualState x:Name="Normal">
                                                                        <Storyboard>
                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                            </DoubleAnimationUsingKeyFrames>
                                                                        </Storyboard>
                                                                    </VisualState>
                                                                    <VisualState x:Name="MouseOver">
                                                                        <Storyboard>
                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.8"/>
                                                                            </DoubleAnimationUsingKeyFrames>
                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Control.Background).Opacity" Storyboard.TargetName="border">
                                                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.8"/>
                                                                            </DoubleAnimationUsingKeyFrames>
                                                                        </Storyboard>
                                                                    </VisualState>
                                                                    <VisualState x:Name="Pressed">
                                                                        <Storyboard>
                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.9"/>
                                                                            </DoubleAnimationUsingKeyFrames>
                                                                        </Storyboard>
                                                                    </VisualState>
                                                                    <VisualState x:Name="Disabled">
                                                                        <Storyboard>
                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                                            </DoubleAnimationUsingKeyFrames>
                                                                        </Storyboard>
                                                                    </VisualState>
                                                                </VisualStateGroup>
                                                            </VisualStateManager.VisualStateGroups>

                                                            <ContentPresenter Content="{TemplateBinding Content}" Focusable="False" Margin="{TemplateBinding Padding}"
                                                                          HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </Grid>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
                <Border Margin="2" CornerRadius="3" BorderThickness="1" BorderBrush="Black"
                        Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}">
                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">
                        画像を<LineBreak/>ドロップ
                    </TextBlock>
                </Border>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Window>
